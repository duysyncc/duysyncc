{"version":3,"sources":["constants/web3/getWeb3.js","constants/contracts/ecr20.js","pages/Tx8Swap/index.jsx","constants/contracts/CrawPancakeFactory.js","constants/contracts/CrawPancakePair.js","pages/toolcrawlliquity/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","a","window","ethereum","web3","Web3","enable","console","error","log","provider","providers","HttpProvider","alert","erc20","addressContract","eth","Contract","ERC20_ABI","Tx8SwapPage","CrawPancakeFactory","CrawPancakeFactory_ABI","CrawPancakePair","CrawPancakePair_ABI","CrawlPage","useState","allPairsLengthCount","setAllPairsLengthCount","listInfo","setListInfo","fGetAllPairs","index","contract","methods","allPairs","call","pairAddress_","fGetAllPairsLengthCount","allPairsLength","allPairsLength_","getInfoPair","addressPair","token0","token0Address","token1","token1Address","getInfoToken","token2","addressToken","addressBalance","name","symbol","balanceOf","balance","decimals","address","update","lengthPair","pairAddress","pairInfo","setListInfo_","Set","useEffect","intervalId","setInterval","clearInterval","className","onClick","map","item","target","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ef642a9.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = async () => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n            // Request account access if needed\r\n            await window.ethereum.enable();\r\n            // Acccounts now exposed\r\n            return web3;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    // Legacy dapp browsers...\r\n    else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log('Injected web3 detected.');\r\n        return web3;\r\n    }\r\n    // Fallback to localhost; use dev console port by default...\r\n    else {\r\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:9545');\r\n        const web3 = new Web3(provider);\r\n        alert('No web3 instance injected, using Local web3.');\r\n        return web3;\r\n    }\r\n};\r\nexport { getWeb3 };","import { getWeb3 } from '../web3/getWeb3';\r\nimport ERC20_ABI from '../abi/erc20.json'\r\nconst erc20 = async (addressContract) => {\r\n    let web3 = await getWeb3();\r\n    return new web3.eth.Contract(ERC20_ABI, addressContract)\r\n};\r\nexport { erc20 };","import './styles.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { getWeb3 } from '../../constants/web3/getWeb3';\r\nimport { erc20 } from '../../constants/contracts/ecr20';\r\nimport { Tx8Swap } from '../../constants/contracts/Tx8Swap';\r\n\r\nfunction Tx8SwapPage() {\r\n  const [accounts, setAccount] = useState(\"Loading...\");\r\n  const [infoUsdt, setInfoUsdt] = useState({});\r\n  const [infoTx8, setInfoTx8] = useState({});\r\n  const [amountUsdtSwap, setAmountUsdtSwap] = useState(0);\r\n  const [amountTxt8Swap, setAmountTxt8Swap] = useState(0);\r\n  const tx8Address = \"0xa39a336e89a33d24b5c8a0d594b1f2a78b255825\"; // Token B\r\n  const usdtAddress = \"0x685aEF5Ce482700dF29Dd69b2931f86575CeFb40\"; // Token A\r\n  const swapAddress = \"0x29798cA65E4Dd7Fc9A5f6735036b5F5D41b701c0\";\r\n\r\n  async function getInfoToken(addressToken) {\r\n    let web3 = await getWeb3();\r\n    let accounts = await web3.eth.getAccounts();\r\n    let contract = await erc20(addressToken);\r\n    let balance = await contract.methods.balanceOf(accounts[0]).call()\r\n    let decimals = await contract.methods.decimals().call()\r\n    let symbol = await contract.methods.symbol().call()\r\n    return { \"symbol\": symbol, \"decimals\": decimals, \"balance\": balance, \"address\": addressToken }\r\n  }\r\n  async function setInfoTokenTx8Init() {\r\n    let { symbol, decimals, balance } = await getInfoToken(tx8Address)\r\n    setInfoTx8({\r\n      symbol: symbol,\r\n      decimals: decimals,\r\n      balance: balance\r\n    })\r\n  }\r\n  async function setInfoTokenUsdtInit() {\r\n    let { symbol, decimals, balance } = await getInfoToken(usdtAddress)\r\n    setInfoUsdt({\r\n      symbol: symbol,\r\n      decimals: decimals,\r\n      balance: balance\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    async function fetWeb3Init() {\r\n      let web3 = await getWeb3();\r\n      let accounts = await web3.eth.getAccounts();\r\n      await setAccount(accounts[0]);\r\n      await setInfoTokenTx8Init();\r\n      await setInfoTokenUsdtInit();\r\n    }\r\n    fetWeb3Init();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h3>{accounts}</h3>\r\n      <div className=\"MainContent\">\r\n        <div className=\"MainCardTx8Swap\">\r\n          <h2 className=\"BalanceHead\">\r\n            Your TX8 balance :{(infoTx8.balance / 10 ** infoTx8.decimals).toFixed(2)}\r\n            <br />\r\n            Your USDT balance :{(infoUsdt.balance / 10 ** infoUsdt.decimals).toFixed(2)}\r\n          </h2>\r\n          <h2>Swap TX8 to USDT</h2>\r\n          <div className=\"SwapPanel\">\r\n            <input type=\"number\" className='inputToken' value={amountTxt8Swap} onChange={(event) => {\r\n              let inputToken = event.target.value;\r\n              setAmountTxt8Swap(inputToken);\r\n            }} />\r\n            <nav className='amount'>{amountTxt8Swap * 2} USDT</nav>\r\n            <button id='ButtonSwap' onClick={async () => {\r\n              let contractTx8 = await erc20(tx8Address);\r\n              let allowanceTx8 = await contractTx8.methods.allowance(accounts, swapAddress).call();\r\n              if (+amountTxt8Swap * 10 ** 18 > +allowanceTx8) {\r\n                alert(\"Approve token TX8 \")\r\n                await contractTx8.methods.approve(swapAddress, Web3.utils.toBN(BigInt(10 ** 50).toString())).send({ from: accounts })\r\n              }\r\n              alert(\"Swap now\")\r\n              try {\r\n                let contract = await Tx8Swap(swapAddress);\r\n                var data = await contract.methods.swapTokenBtoTokenA(\r\n                  Web3.utils.toBN(BigInt(amountTxt8Swap * 10 ** 18).toString()),\r\n                ).send({ from: accounts })\r\n                alert(\"Swap Success!, Check on https://mumbai.polygonscan.com/tx/\" + data.transactionHash)\r\n              } catch (error) {\r\n                console.log(\"Error\")\r\n              }\r\n              await setInfoTokenTx8Init();\r\n              await setInfoTokenUsdtInit();\r\n            }}>Swap Now</button>\r\n          </div>\r\n          <hr />\r\n          <h2>Swap USDT to TX8</h2>\r\n          <div className=\"SwapPanel\">\r\n            <input type=\"number\" className='inputToken' value={amountUsdtSwap} onChange={(event) => {\r\n              let inputToken = event.target.value;\r\n              setAmountUsdtSwap(inputToken);\r\n            }} />\r\n            <nav className='amount'>{amountUsdtSwap / 2} TX8</nav>\r\n            <button id='ButtonSwap' onClick={async () => {\r\n              let contractUsdt = await erc20(usdtAddress);\r\n              let allowanceUsdt = await contractUsdt.methods.allowance(accounts, swapAddress).call();\r\n              if (+amountUsdtSwap * 10 ** 18 > +allowanceUsdt) {\r\n                alert(\"Approve token USDT \")\r\n                await contractUsdt.methods.approve(swapAddress, Web3.utils.toBN(BigInt(10 ** 50).toString())).send({ from: accounts })\r\n              }\r\n              alert(\"Swap now\")\r\n              try {\r\n                let contract = await Tx8Swap(swapAddress);\r\n                var data = await contract.methods.swapTokenAtoTokenB(\r\n                  Web3.utils.toBN(BigInt(amountUsdtSwap * 10 ** 18).toString()),\r\n                ).send({ from: accounts })\r\n                alert(\"Swap Success!, Check on https://mumbai.polygonscan.com/tx/\" + data.transactionHash)\r\n              } catch (error) {\r\n                console.log(\"Error\")\r\n              }\r\n              await setInfoTokenTx8Init();\r\n              await setInfoTokenUsdtInit();\r\n            }}>Swap Now</button>\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Tx8SwapPage;\r\n","import { getWeb3 } from '../web3/getWeb3';\r\nimport CrawPancakeFactory_ABI from '../abi/CrawPancakeFactory.json'\r\nconst CrawPancakeFactory = async (addressContract) => {\r\n    let web3 = await getWeb3();\r\n    return new web3.eth.Contract(CrawPancakeFactory_ABI, addressContract)\r\n};\r\nexport { CrawPancakeFactory };","import { getWeb3 } from '../web3/getWeb3';\r\nimport CrawPancakePair_ABI from '../abi/CrawPancakePair.json'\r\nconst CrawPancakePair = async (addressContract) => {\r\n    let web3 = await getWeb3();\r\n    return new web3.eth.Contract(CrawPancakePair_ABI, addressContract)\r\n};\r\nexport { CrawPancakePair };","import \"./styles.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlusCircle,\r\n  faPlus,\r\n  faSortDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Web3 from \"web3\";\r\nimport { getWeb3 } from \"../../constants/web3/getWeb3\";\r\nimport { erc20 } from \"../../constants/contracts/ecr20\";\r\nimport { CrawPancakeFactory } from \"../../constants/contracts/CrawPancakeFactory\";\r\nimport { CrawPancakePair } from \"../../constants/contracts/CrawPancakePair\";\r\nimport { PancakeRouter } from \"../../constants/contracts/PancakeRouter\";\r\nimport TokenSearch from \"../../components/TokenSearch\";\r\n\r\nfunction CrawlPage() {\r\n  const [allPairsLengthCount, setAllPairsLengthCount] = useState(0);\r\n  const [listInfo, setListInfo] = useState([]);\r\n\r\n  async function fGetAllPairs(index) {\r\n    let contract = await CrawPancakeFactory(\r\n      \"0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\"\r\n    );\r\n    let pairAddress_ = await contract.methods.allPairs(index).call();\r\n    return pairAddress_;\r\n  }\r\n\r\n  async function fGetAllPairsLengthCount() {\r\n    let contract = await CrawPancakeFactory(\r\n      \"0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\"\r\n    );\r\n    let allPairsLength_ = await contract.methods.allPairsLength().call();\r\n    // console.log(allPairsLength_);\r\n    return allPairsLength_;\r\n  }\r\n  async function getInfoPair(addressPair) {\r\n    let contract = await CrawPancakePair(addressPair);\r\n    let token0Address = await contract.methods.token0().call();\r\n    let token1Address = await contract.methods.token1().call();\r\n    let token1 = await getInfoToken(token0Address, addressPair);\r\n    let token2 = await getInfoToken(token1Address, addressPair);\r\n    // console.log(token1);\r\n    // console.log(token2);\r\n    return {\r\n      addressPair: addressPair,\r\n      token0Address: token1,\r\n      token1Address: token2,\r\n    };\r\n  }\r\n\r\n  async function getInfoToken(addressToken, addressBalance) {\r\n    let contract = await erc20(addressToken);\r\n    let name = await contract.methods.name().call();\r\n    let symbol = await contract.methods.symbol().call();\r\n    let balance = await contract.methods.balanceOf(addressBalance).call();\r\n    let decimals = await contract.methods.decimals().call();\r\n    return {\r\n      symbol: symbol,\r\n      name: name,\r\n      address: addressToken,\r\n      balance: balance,\r\n      decimals: decimals,\r\n    };\r\n  }\r\n  async function update() {\r\n    let lengthPair = await fGetAllPairsLengthCount();\r\n    let pairAddress = await fGetAllPairs(lengthPair - 1);\r\n    let pairInfo = await getInfoPair(pairAddress);\r\n    let setListInfo_ = [...listInfo, pairInfo];\r\n    if (lengthPair != allPairsLengthCount) {\r\n      setListInfo([...new Set(setListInfo_)]);\r\n    }\r\n    setAllPairsLengthCount(lengthPair);\r\n  }\r\n  useEffect(() => {\r\n    const intervalId = setInterval(async () => {\r\n      await update();\r\n    }, 2000);\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [allPairsLengthCount]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Summary\">\r\n        <h1>Tổng số cặp : {allPairsLengthCount}</h1>\r\n        <button\r\n          onClick={() => {\r\n            setListInfo([]);\r\n          }}\r\n        >\r\n          Clear All\r\n        </button>\r\n      </div>\r\n      <div className=\"ViewPair\">\r\n        {listInfo.map((item) => {\r\n          return (\r\n            <div className=\"Card\" key={item.addressPair}>\r\n              <a\r\n                target=\"_blank\"\r\n                className=\"PairAddress\"\r\n                href={\r\n                  \"https://pancakeswap.finance/info/pool/\" + item.addressPair\r\n                }\r\n              >\r\n                Pool : {item.addressPair}\r\n              </a>\r\n              <div className=\"PairOne\">\r\n                <h4>\r\n                  {item.token0Address.name} | Balance :\r\n                  {item.token0Address.balance /\r\n                    10 ** item.token1Address.decimals}\r\n                </h4>\r\n                <a\r\n                  target=\"_blank\"\r\n                  href={\r\n                    \"https://bscscan.com/address/\" + item.token0Address.address\r\n                  }\r\n                >\r\n                  Address : {item.token0Address.address}\r\n                </a>\r\n                <h5>Symbol : {item.token0Address.symbol}</h5>\r\n              </div>\r\n              <div className=\"PairTwo\">\r\n                <h4>\r\n                  {item.token1Address.name} | Balance :\r\n                  {item.token1Address.balance /\r\n                    10 ** item.token1Address.decimals}\r\n                </h4>\r\n                <a\r\n                  target=\"_blank\"\r\n                  href={\r\n                    \"https://bscscan.com/address/\" + item.token1Address.address\r\n                  }\r\n                >\r\n                  Address : {item.token1Address.address}\r\n                </a>\r\n                <h5>Symbol : {item.token1Address.symbol}</h5>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CrawlPage;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport SwapPage from \"./pages/Swap\";\r\nimport LiquidityPage from \"./pages/Liquidity\";\r\nimport FaucetPage from \"./pages/Faucet\";\r\nimport StakePage from \"./pages/Stake\";\r\nimport Tx8SwapPage from \"./pages/Tx8Swap\";\r\nimport CrawlPage from \"./pages/toolcrawlliquity\";\r\nfunction App() {\r\n  // const [url, setUrl] = useState(\"/Swap\")\r\n  const [url, setUrl] = useState(\"/Swap\");\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <ul className=\"router\">\r\n    //     <li className=\"Logo\">Hello Swap</li>\r\n    //     <li onClick={() => {\r\n    //       setUrl(\"/Swap\")\r\n    //     }}>Swap</li>\r\n\r\n    //     <li onClick={() => {\r\n    //       setUrl(\"/Liquidity\")\r\n    //     }}>Liquidity</li>\r\n\r\n    //     <li onClick={() => {\r\n    //       setUrl(\"/Stake\")\r\n    //     }}>Stake</li>\r\n\r\n    //     <li onClick={() => {\r\n    //       setUrl(\"/Tx8Swap\")\r\n    //     }}>Tx8Swap</li>\r\n\r\n    //     <li onClick={() => {\r\n    //       setUrl(\"/Faucet\")\r\n    //     }}>Faucet</li>\r\n\r\n    //   </ul>\r\n    //   <div className=\"main\">\r\n    //     {url == \"/Swap\" ? <SwapPage /> : null}\r\n    //     {url == \"/Liquidity\" ? <LiquidityPage /> : null}\r\n    //     {url == \"/Faucet\" ? <FaucetPage /> : null}\r\n    //     {url == \"/Stake\" ? <StakePage /> : null}\r\n    //     {url == \"/Tx8Swap\" ? <Tx8SwapPage /> : null}\r\n    //     {url == \"/CrawlPage\" ? <CrawlPage /> : null}\r\n    //   </div>\r\n    // </div>\r\n    <CrawlPage />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}